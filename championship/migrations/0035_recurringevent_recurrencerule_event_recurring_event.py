# Copyright 2024 Leonin League
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Generated by Django 5.0.4 on 2024-06-07 07:53

import django.db.models.deletion
from django.db import migrations, models

import championship.models


class Migration(migrations.Migration):

    dependencies = [
        (
            "championship",
            "0034_eventorganizer_url_alter_eventorganizer_contact_and_more",
        ),
    ]

    operations = [
        migrations.CreateModel(
            name="RecurringEvent",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "start_date",
                    models.DateField(
                        default=championship.models.tomorrow,
                        help_text="The first date on which this event will be held. Only future events will be rescheduled. Today's and past events won't change.",
                    ),
                ),
                (
                    "end_date",
                    models.DateField(
                        help_text="The last date on which this event series will be held. Can be up to 1 year in the future."
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="RecurrenceRule",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "type",
                    models.CharField(
                        choices=[
                            ("SCHEDULE", "Schedule"),
                            ("SKIP", "Skip"),
                            ("REGIONAL", "Promote to SUL Regional"),
                        ],
                        default="SCHEDULE",
                        help_text="Select 'Schedule' to run the event on each of those days. Chose 'Skip' to skip the event on some days. Chose 'SUL Regional' to make the event SUL Regional on these days.",
                        max_length=10,
                    ),
                ),
                (
                    "weekday",
                    models.CharField(
                        choices=[
                            ("MONDAY", "Monday"),
                            ("TUESDAY", "Tuesday"),
                            ("WEDNESDAY", "Wednesday"),
                            ("THURSDAY", "Thursday"),
                            ("FRIDAY", "Friday"),
                            ("SATURDAY", "Saturday"),
                            ("SUNDAY", "Sunday"),
                        ],
                        default="FRIDAY",
                        help_text="The weekday your event will take place.",
                        max_length=10,
                    ),
                ),
                (
                    "week",
                    models.CharField(
                        choices=[
                            ("FIRST_WEEK", "First week of the month"),
                            ("SECOND_WEEK", "Second week of the month"),
                            ("SECOND_LAST_WEEK", "Second to last week of the month"),
                            ("LAST_WEEK", "Last week of the month"),
                            ("EVERY_WEEK", "Every week"),
                            ("EVERY_OTHER_WEEK", "Every other week"),
                        ],
                        default="FIRST_WEEK",
                        help_text="Which week of the month your event will take place.",
                        max_length=20,
                    ),
                ),
                (
                    "recurring_event",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="championship.recurringevent",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="event",
            name="recurring_event",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="championship.recurringevent",
            ),
        ),
    ]
